/*
Reto #12: üì∏ ¬øEs una copia v√°lida?

En el Polo Norte todav√≠a usan fotocopiadoras de papel. Los elfos las usan para copiar las cartas que los ni√±os env√≠an a Santa y as√≠ poder enviarlas a todos los departamentos de regalos.

Sin embargo ya son muy viejas y no funcionan muy bien. Cada vez que hacen una copia, la calidad de la copia disminuye ligeramente, un fen√≥meno conocido como p√©rdida generacional.

Necesitas detectar si una carta es una copia de otra. Las cartas son muy largas y no puedes leerlas, pero puedes compararlas con un algoritmo.

Existe una gran probabilidad de que un caracter se degrade en cada copia (¬°no pasa siempre!). Y al ocurrir, la regla que sigue es:

- Los caracteres de la A a la Z se degradan de may√∫sculas a min√∫sculas (A-Z ‚áí a-z)
- Las letras se degradan en una serie de caracteres en este orden: a-z ‚áí # ‚áí + ‚áí : ‚áí . ‚áí
- Una vez degradadas las letras en los s√≠mbolos, se pueden continuar degradando.
- Ten en cuenta que el √∫ltimo es un espacio en blanco, no un caracter vac√≠o.
- Los caracteres que no son letras (como los d√≠gitos) no se degradan.

Sabiendo esto y recibiendo dos cartas. La supuesta original y la copia. Debes determinar si la copia es una copia de la otra.
*/

function checkIsValidCopy(original, copy) {
  // Definimos las degradaciones b√°sicas
  const basicDegradations = {
    A: "a",
    B: "b",
    C: "c",
    D: "d",
    E: "e",
    F: "f",
    G: "g",
    H: "h",
    I: "i",
    J: "j",
    K: "k",
    L: "l",
    M: "m",
    N: "n",
    O: "o",
    P: "p",
    Q: "q",
    R: "r",
    S: "s",
    T: "t",
    U: "u",
    V: "v",
    W: "w",
    X: "x",
    Y: "y",
    Z: "z",
    a: "#",
    b: "#",
    c: "#",
    d: "#",
    e: "#",
    f: "#",
    g: "#",
    h: "#",
    i: "#",
    j: "#",
    k: "#",
    l: "#",
    m: "#",
    n: "#",
    o: "#",
    p: "#",
    q: "#",
    r: "#",
    s: "#",
    t: "#",
    u: "#",
    v: "#",
    w: "#",
    x: "#",
    y: "#",
    z: "#",
    "#": "+",
    "+": ":",
    ":": ".",
    ".": " ",
  };

  // Funci√≥n para obtener todas las degradaciones posibles de un car√°cter
  function getAllDegradations(char) {
    let degradations = [char];
    while (basicDegradations[char]) {
      char = basicDegradations[char];
      degradations.push(char);
    }
    return degradations;
  }

  // Verificamos cada car√°cter
  if (original.length !== copy.length) return false;
  for (let i = 0; i < original.length; i++) {
    const originalChar = original[i];
    const copyChar = copy[i];
    const validDegradations = getAllDegradations(originalChar);

    if (!validDegradations.includes(copyChar)) {
      return false;
    }
  }
  return true;
}

console.log(checkIsValidCopy("Santa Claus", "s#+:. c:. s")); // true
console.log(checkIsValidCopy("Santa Claus", "s#+:.#c:. s")); // false (hay un # donde no deber√≠a)

/*
Para entender c√≥mo funcionan las fotocopiadoras y su degradaci√≥n, mira este ejemplo:

original:  'Santa Claus'
1¬™ copia:  'santa cla#s'
2¬™ copia:  'sa#t# cl#+s'
3¬™ copia:  'sa+## c#+:s'
4¬™ copia:  's#++. c+:.s'
5¬™ copia:  's#+:. c:. s'

Por lo tanto s#+:. c+:++ es una copia v√°lida de Santa Claus. Y, como ves, la degradaci√≥n de las letras no se produce en un orden espec√≠fico, es aleatorio.

Basado en el desaf√≠o de CodeWars Photocopy decay
*/
